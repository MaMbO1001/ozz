package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"example/graph/model"
	"math/rand"
	"strconv"
)

// NewPost is the resolver for the newPost field.
func (r *mutationResolver) NewPost(ctx context.Context, input model.CreatePost) (*model.Post, error) {
	var post []*model.Post
	newpost :=
		model.Post{
			ID:       strconv.Itoa(rand.Int()),
			Title:    input.Title,
			UserName: "Jopa",
			Text:     input.Text,
			Comments: []*model.Comment{},
		}
	post = append(post, &newpost)
	return post, nil
}

// NewComment is the resolver for the newComment field.
func (r *mutationResolver) NewComment(ctx context.Context, input model.CreateComment) (*model.Comment, error) {
	var comment []*model.Comment
	newcomment := model.Comment{
		ID:       strconv.Itoa(rand.Int()),
		UserName: "Niga",
		Text:     input.Text,
	}
	comment = append(comment, &newcomment)
	return newcomment, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//   - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//     it when you're done.
//   - You have helper methods in this file. Move them out to keep these resolver files clean.
func (r *mutationResolver) CreatePost(ctx context.Context, input model.CreatePost) (*model.Post, error) {
	var post model.Post
	post.Title = input.Title
	post.Text = input.Text
	post.UserName = input.UserName
	post.Comments = []*model.Comment{}
	return &post, nil
}

func (r *queryResolver) CreateComment(ctx context.Context, input model.CreateComment) (*model.Comment, error) {
	var comment model.Comment
	comment.ID = strconv.Itoa(rand.Int())
	comment.UserName = input.UserName
	comment.Text = input.Text
	return &comment, nil
}

type queryResolver struct{ *Resolver }
