package graph


			// This file will be automatically regenerated based on the schema, any resolver implementations
			// will be copied through when generating and any unknown code will be moved to the end.
			// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
"context"
"fmt"
"io"
"strconv"
"time"
"sync"
"errors"
"bytes"
gqlparser "github.com/vektah/gqlparser/v2"
"github.com/vektah/gqlparser/v2/ast"
"github.com/99designs/gqlgen/graphql"
"github.com/99designs/gqlgen/graphql/introspection"
"go/doc/comment"
"example/graph/model"
"math/rand"
model1 "github.com/MaMbO1001/cmd/post/internal/app/cmd/example/graph/model")


















// CreatePost is the resolver for the createPost field.
	func (r *mutationResolver) CreatePost(ctx context.Context, title string, content string, authorID string, commentsAllowed bool) ( *model1.Post,  error){
		panic(fmt.Errorf("not implemented: CreatePost - createPost"))
	}

// CreateComment is the resolver for the createComment field.
	func (r *mutationResolver) CreateComment(ctx context.Context, postID string, content string, authorID string, parentCommentID *string) ( *model1.Comment,  error){
		panic(fmt.Errorf("not implemented: CreateComment - createComment"))
	}

// Posts is the resolver for the posts field.
	func (r *queryResolver) Posts(ctx context.Context) ( []*model1.Post,  error){
		panic(fmt.Errorf("not implemented: Posts - posts"))
	}

// Post is the resolver for the post field.
	func (r *queryResolver) Post(ctx context.Context, id string) ( *model1.Post,  error){
		panic(fmt.Errorf("not implemented: Post - post"))
	}

// CommentAdded is the resolver for the commentAdded field.
	func (r *subscriptionResolver) CommentAdded(ctx context.Context, postID string) ( <-chan *model1.Comment,  error){
		panic(fmt.Errorf("not implemented: CommentAdded - commentAdded"))
	}



// Mutation returns MutationResolver implementation.
	func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }
// Query returns QueryResolver implementation.
	func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }
// Subscription returns SubscriptionResolver implementation.
	func (r *Resolver) Subscription() SubscriptionResolver { return &subscriptionResolver{r} }


type mutationResolver struct { *Resolver }
type queryResolver struct { *Resolver }
type subscriptionResolver struct { *Resolver }



    // !!! WARNING !!!
    // The code below was going to be deleted when updating resolvers. It has been copied here so you have
    // one last chance to move it out of harms way if you want. There are two reasons this happens:
	//  - When renaming or deleting a resolver the old code will be put in here. You can safely delete
	//    it when you're done.
	//  - You have helper methods in this file. Move them out to keep these resolver files clean.
	The code below was going to be deleted when updating resolvers. It has been copied here so you have
one last chance to move it out of harms way if you want. There are two reasons this happens:
  - When renaming or deleting a resolver the old code will be put in here. You can safely delete
    it when you're done.
  - You have helper methods in this file. Move them out to keep these resolver files clean.
	func (r *mutationResolver) CreatePost(ctx context.Context, input model1.Post) ( *model1.Post,  error){
		post := &model1.Post{
			Title:        input.Title,
			Content:      input.Content,
			AuthorID:     input.AuthorID,
			Comments:     []*model1.Comment{},
			CommentsAllowed: input.CommentsAllowed,
		}
		return post, nil
	}

// CreateComment is the resolver for the createComment field.
	func (r *mutationResolver) CreateComment(ctx context.Context, postID string, content string, authorID string, parentCommentID *string) ( *model1.Comment,  error){
		panic(fmt.Errorf("not implemented: CreateComment - createComment"))
	}

// Posts is the resolver for the posts field.
	func (r *queryResolver) Posts(ctx context.Context) ( []*model1.Post,  error){
		panic(fmt.Errorf("not implemented: Posts - posts"))
	}

// Post is the resolver for the post field.
	func (r *queryResolver) Post(ctx context.Context, id string) ( *model1.Post,  error){
		panic(fmt.Errorf("not implemented: Post - post"))
	}

// CommentAdded is the resolver for the commentAdded field.
	func (r *subscriptionResolver) CommentAdded(ctx context.Context, postID string) ( <-chan *model1.Comment,  error){
		panic(fmt.Errorf("not implemented: CommentAdded - commentAdded"))
	}



// Mutation returns MutationResolver implementation.
	func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }
// Query returns QueryResolver implementation.
	func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }
// Subscription returns SubscriptionResolver implementation.
	func (r *Resolver) Subscription() SubscriptionResolver { return &subscriptionResolver{r} }



func (r *mutationResolver) NewComment(ctx context.Context, input model1.Comment) (*model1.Comment, error) {
	var comment []*model1.Comment
	newcomment := model1.Comment{
		ID:       strconv.Itoa(rand.Int()),
		AuthorID: input.AuthorID,
		Content:     input.Content,
	}
	comment = append(comment, &newcomment)
	return &newcomment, nil
}
func (r *queryResolver) CreateComment(ctx context.Context, input model1.Comment) (*model1.Comment, error) {
	var comm []*model1.Comment
	comment :=  model1.Comment{
		ID:       strconv.Itoa(rand.Int()),
		AuthorID: strconv.Itoa(rand.Int()),
		Content:  input.Content,
	}
	comm = append(comm, &comment)
	return  &comment, nil
}

